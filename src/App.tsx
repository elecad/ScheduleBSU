import '@/styles/index.css'import Drawer from "@/components/ui/Drawer/Drawer.tsx";import MobileBar from "@/components/ui/MobileBar/MobileBar.tsx";import DesktopLogo from "@/components/schedule/DesktopLogo/DesktopLogo.tsx";import {CSSProperties, useCallback, useEffect, useState} from "react";import Card from "@/components/ui/Card/Card.tsx";import Button from "@/components/ui/Button/Button.tsx";import classNames from "classnames";import Content from "@/components/ui/Content/Content.tsx";import {ILesson, MILLISECOND_IN_DAY, useSchedule} from "@/hooks/useShedule.ts";import ExpansionPanel from "@/components/ui/ExpansionPanel/ExpansionPanel.tsx";import LessonHeader from "@/components/schedule/LessonHeader/LessonHeader.tsx";import WeekPanel from "@/components/schedule/WeekPanel/WeekPanel.tsx";import LessonContent from "@/components/schedule/LessonContent/LessonContent.tsx";import Autocomplite from "@/components/schedule/Autocomplite/Autocomplite.tsx";type AppTheme = "light" | "dark";const styleDrawerElement: CSSProperties = {    marginTop: "20px",    marginBottom: "20px",}const styleDayHeader: CSSProperties = {    backgroundColor: "#3f51b5",    color: "white",    padding: "15px 25px",    marginBottom: "10px",    fontWeight: 600,    display: "flex",    alignItems: "center",    justifyContent: "space-between",    position: "sticky"}const styleNameDayLabel: CSSProperties = {    fontSize: "1rem"}const styleDateDayLabel: CSSProperties = {    fontSize: "0.9rem"}const styleCurrentDay: CSSProperties = {    position: "absolute",    width: "9px",    height: "9px",    backgroundColor: "white",    borderRadius: "50%",    left: "10px",    top: "20px"}const styleButtonList: CSSProperties = {display: "flex", flexWrap: "wrap", rowGap: "4px", columnGap: "4px"}function App() {    const [theme, setTheme] = useState<AppTheme>("light")    const {lesson, getLesson} = useSchedule()    const [panelObject, setPanelObject] = useState({group: -1, position: -1})    const [time, setTime] = useState(new Date())    function openPanels(newPanel: { group: number, position: number }) {        const {group: newGroup, position: newPosition} = newPanel        const {group: currentGroup, position: currentPosition} = panelObject        if (currentGroup == newGroup && currentPosition == newPosition) {            setPanelObject({group: -1, position: -1})        } else {            setPanelObject(newPanel)        }    }    useEffect(() => {        getLesson()    }, [])    const themeClickHandler = useCallback(() => {        const newTheme: AppTheme = theme == 'light' ? 'dark' : 'light'        setTheme(newTheme)    }, [theme])    function findNowLesson() {        console.log("[!] Текущая дата", new Date(+new Date - 4 * MILLISECOND_IN_DAY).toLocaleTimeString())        setTime(new Date(+new Date - 4 * MILLISECOND_IN_DAY))        let wait = MILLISECOND_IN_DAY;        for (const s of lesson) {            for (const l of s.lesson) {                const deltaStart = l.start.getTime() - time.getTime();                const deltaEnd = l.end.getTime() - time.getTime();                console.log(wait, deltaStart, deltaEnd)                if (deltaStart > 0 && wait > deltaStart)                    wait = deltaStart                if (deltaEnd > 0 && wait > deltaEnd)                    wait = deltaEnd            }        }        if (wait <= MILLISECOND_IN_DAY) {            console.log("Обновление: ", new Date(+time + +wait).toLocaleTimeString(), new Date(+time + +wait).toLocaleDateString())            setTimeout(findNowLesson, wait)        }    }    useEffect(() => {        findNowLesson()    }, [lesson]);    function isNowLesson(l: ILesson) {        const isCurrentDay = l.start.toLocaleDateString() == time.toLocaleDateString();        return isCurrentDay && l.start.getTime() < time.getTime() && time.getTime() < l.end.getTime()    }    function isTodayLesson(l: ILesson) {        console.log(!isNowLesson(l) && l.start.toLocaleDateString() == time.toLocaleDateString())        return !isNowLesson(l) && l.start.toLocaleDateString() == time.toLocaleDateString();    }    return (        <div className={classNames('app', theme)}>            <MobileBar>                <DesktopLogo></DesktopLogo>            </MobileBar>            <Drawer>                <DesktopLogo style={styleDrawerElement}></DesktopLogo>                <Autocomplite/>                <Card style={styleDrawerElement}>                    <div className={'header'}>Debug-функции</div>                    <div style={styleButtonList}>                        <Button onClick={themeClickHandler}>Сменить тему</Button>                    </div>                </Card>            </Drawer>            <Content>                <div className={classNames('schedule-header')}>                    <Card style={{marginBottom: "20px"}}>                        <div className={classNames('schedule-name')}>Группа 12002331</div>                        <div className={classNames('devider')}></div>                        <div style={{                            display: "flex",                            justifyContent: "center",                            alignItems: "stretch",                            gap: "20px"                        }}>                            <Button icon={'chevron_left'}></Button>                            <Button>Текущая неделя</Button>                            <Button icon={'chevron_right'}></Button>                        </div>                    </Card>                </div>                <div className={classNames('lesson-list')}>                    {lesson.map((el, index) => {                        return <>                            <Card                                style={styleDayHeader}>                                {el.date.toLocaleDateString() == time.toLocaleDateString() &&                                    <div style={styleCurrentDay}></div>}                                <div style={styleNameDayLabel}>{el.name}</div>                                <div style={styleDateDayLabel}>{el.date.toLocaleDateString()}</div>                            </Card>                            {                                el.lesson.length ?                                    el.lesson.map((l, j) =>                                        <ExpansionPanel open={panelObject.group == index && panelObject.position == j}                                                        onOpen={() => {                                                            openPanels({group: index, position: j})                                                        }}                                                        className={classNames({"today": isTodayLesson(l)}, {"now": isNowLesson(l)})}                                                        headerPanel={<LessonHeader lesson={l}                                                                                   open={panelObject.group == index && panelObject.position == j}/>}                                                        contentPanel={<LessonContent lesson={l}/>}                                                        style={{marginBottom: '10px'}}/>                                    ) : <div className={classNames("not-lesson-wrapper")}>                                        <div className={classNames('not-lesson')}>Занятий нет</div>                                    </div>                            }                        </>                    })}                </div>            </Content>            <WeekPanel days={lesson}></WeekPanel>        </div>    )}export default App